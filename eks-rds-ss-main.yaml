AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cloudformation Template DAT312 EKS ACK Controller Workshop'

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB
    - Label:
        default: Cloud9 Configuration
      Parameters:
      - C9InstanceType
    ParameterLabels:
      Application:
        default: Application Name
      ClassB:
        default: ClassB 2nd Octet
      C9InstanceType:
        default: Cloud9 Instance Type
        
Parameters:
    
  Application:
    Description: 'Specify Application Name'
    Type: String
    Default: 'eksack'

  EKSIAMRoleName:
    Type: String
    Description: The name of the IAM role for the EKS service to assume.
    Default: EKSIAMAdminRole

  EKSClusterName:
    Type: String
    Description: The desired name of your AWS EKS Cluster.
    Default: eksclu

  KubernetesVersion:
    Description: The Kubernetes version to install
    Type: String
    Default: 1.23
    AllowedValues:
      - 1.25
      - 1.24
      - 1.23

  NumWorkerNodes:
    Type: Number
    Description: Number of worker nodes to create
    Default: 2

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.large

  LoabdBalancerVersion:
    Description: EKS Load Balancer Controller Version
    Type: String
    Default: v2.4.1

  SubnetAPrivate:
    Description: SubnetAPrivate
    Type: String

  SubnetBPrivate:
    Description: SubnetBPrivate
    Type: String

  SubnetCPrivate:
    Description: SubnetCPrivate
    Type: String 

  VPC:
     Description: VPC ID
     Type: String

Resources:

  #============================================================================#
  # Creating RDS PostgreSQL Instances
  #============================================================================#

  RDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 8
        ExcludePunctuation: true

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: rds-db-subnet
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds: 
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
        - !Ref SubnetCPrivate


  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Example Security Group"
      GroupDescription: "RDS traffic"
      VpcId: !Ref "VPC"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
       - IpProtocol: "tcp"
         FromPort: "5432"
         ToPort: "5432"
         CidrIp: !Sub '10.0.0.0/8'
       - IpProtocol: "tcp"
         FromPort: "5432"
         ToPort: "5432"
         SourceSecurityGroupId: !Ref "InstanceSecurityGroup"

  DemoInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: sharding-pg1
      DBName: shardingpg1
      DBInstanceClass: db.t3.medium
      Engine: postgres
      EngineVersion: 13.4
      AllocatedStorage: 20
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceRotationSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceRotationSecret, ':SecretString:password}}' ]]
      PubliclyAccessible: False
      BackupRetentionPeriod: 0
      Tags:
        - Key: Project
          Value: "Demo of RDS PostgreSQL"
      VPCSecurityGroups:
        - !Ref InstanceSecurityGroup
      DBSubnetGroupName:
        Ref: DBSubnetGroup

  DemoInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: sharding-pg2
      DBName: shardingpg2
      DBInstanceClass: db.t3.medium
      Engine: postgres
      EngineVersion: 13.4
      AllocatedStorage: 20
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceRotationSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSInstanceRotationSecret, ':SecretString:password}}' ]]
      PubliclyAccessible: False
      BackupRetentionPeriod: 0
      Tags:
        - Key: Project
          Value: "Demo of RDS PostgreSQL"
      VPCSecurityGroups:
        - !Ref InstanceSecurityGroup
      DBSubnetGroupName:
        Ref: DBSubnetGroup

  #============================================================================#
  # Control plane security group
  #============================================================================#

  ClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: !Sub '10.0.0.0/8'
        Description: 'Access to AppServer Host Security Group for PG'
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Sub '10.0.0.0/8'
        Description: 'Access to AppServer Host Security Group for Redis'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-AuroraClusterSecurityGroup'

  ClusterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 'ClusterSecurityGroup.GroupId'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      Description: 'Self Reference'

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # EKS configuration
  #============================================================================#
    
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      RoleArn: !GetAtt EKSIAMRole.Arn
#      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:root"
      Version: !Ref KubernetesVersion
      ResourcesVpcConfig:
          SecurityGroupIds:
           - !Ref ControlPlaneSecurityGroup
          SubnetIds:
           - !Ref SubnetAPrivate
           - !Ref SubnetBPrivate
           - !Ref SubnetCPrivate
    DependsOn: [EKSIAMRole,ControlPlaneSecurityGroup]

  EKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
                - ec2.amazonaws.com
                - eks-connector.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AdministratorAccess

  #============================================================================#
  # WorkerNode  security group
  #============================================================================#

  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WorkerNodesSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${EKSCluster}"
          Value: "owned"

  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"

  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  
  #============================================================================#
  # Worker Nodes Group 
  #============================================================================#
 
  WorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess

  # IMPORTANT NOTE: We have to define NodeGroup (type: AWS::EKS::Nodegroup), without this no woker nodes will be attach to cluster
  WorkerNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSClusterName
      NodeRole: !GetAtt WorkerNodesRole.Arn
      ScalingConfig:
        MinSize:
          Ref: NumWorkerNodes
        DesiredSize:
          Ref: NumWorkerNodes
        MaxSize:
          Ref: NumWorkerNodes
      Subnets:
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
        - !Ref SubnetCPrivate

Outputs:
  TemplateID:
    Description: 'Template ID'
    Value: 'DAT312'
    
  Region:
    Description: 'Region'
    Value: '${AWS::Region}'

  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  EKSRole:
    Value: !Ref EKSIAMRole
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-EKSRole'

  EKSClusterName:
    Value: !Ref EKSClusterName
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-EKSClusterName'

  DBSubnetGroup:
    Value: !Ref DBSubnetGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DBSubnetGroup'

  ClusterSecurityGroup:
    Value: !Sub ClusterSecurityGroup
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-ClusterSecurityGroup'

  DemoInstance1:
     Value: !GetAtt [DemoInstance1, Endpoint.Address]

  RDSSecretsArn:
     Value: !Ref RDSInstanceRotationSecret

  RDSSecurityGroup:
     Value: !Ref InstanceSecurityGroup


